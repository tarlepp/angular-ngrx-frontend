{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json",
          "e2e/tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:ngrx/recommended"
      ],
      "plugins": [
        "@angular-eslint",
        "deprecation",
        "import"
      ],
      "rules": {
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/no-duplicate-enum-values": "off",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit"
          }
        ],
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-extraneous-class": "off",
        "@typescript-eslint/no-inferrable-types": [
          "off",
          {
            "ignoreParameters": true
          }
        ],
        "@typescript-eslint/no-invalid-this": "error",
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "vars": "all",
            "varsIgnorePattern": "(.)Effect\\$$"
          }
        ],
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": [
              "camelCase"
            ]
          },
          {
            "selector": "enumMember",
            "format": [
              "UPPER_CASE"
            ]
          },
          {
            "selector": "objectLiteralProperty",
            "format": [
              "camelCase"
            ]
          },
          {
            "selector": "typeParameter",
            "format": [
              "PascalCase",
              "UPPER_CASE"
            ]
          },
          {
            "selector": [
              "class",
              "enum",
              "interface",
              "typeAlias"
            ],
            "format": [
              "PascalCase"
            ]
          }
        ],
        "arrow-parens": [
          "off",
          "always"
        ],
        "comma-dangle": [
          "error",
          "always-multiline"
        ],
        "eqeqeq": [
          "error",
          "always"
        ],
        "deprecation/deprecation": "error",
        "import/no-extraneous-dependencies": [
          "error",
          {
            "devDependencies": false
          }
        ],
        "import/order": [
          "error",
          {
            "pathGroups": [
              {
                "pattern": "^(?!src\\/|package.json)([@]|[a-z])",
                "group": "external",
                "position": "before"
              },
              {
                "pattern": "^(src\\/|package.json)",
                "group": "internal",
                "position": "after"
              }
            ],
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true
            },
            "groups": [
              "external",
              "internal"
            ],
            "newlines-between": "ignore",
            "pathGroupsExcludedImportTypes": [
              "builtin"
            ]
          }
        ],
        "ngrx/no-multiple-actions-in-effects": "off",
        "ngrx/no-store-subscription": "off",
        "ngrx/prefer-effect-callback-in-block-statement": "off",
        "no-duplicate-case": "error",
        "no-empty": [
          "error",
          {
            "allowEmptyCatch": true
          }
        ],
        "no-invalid-this": "off",
        "no-new-func": "error",
        "no-param-reassign": "error",
        "no-redeclare": "error",
        "no-return-await": "error",
        "no-sequences": "error",
        "no-sparse-arrays": "error",
        "no-template-curly-in-string": "error",
        "no-unused-vars": "off",
        "no-useless-constructor": "off",
        "no-void": "error",
        "no-shadow": "off",
        "prefer-object-spread": "error"
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {
        "@angular-eslint/template/banana-in-box": "error",
        "@angular-eslint/template/click-events-have-key-events": "error",
        "@angular-eslint/template/conditional-complexity": "error",
        "@angular-eslint/template/cyclomatic-complexity": "error",
        "@angular-eslint/template/eqeqeq": "error",
        "@angular-eslint/template/mouse-events-have-key-events": "error",
        "@angular-eslint/template/no-autofocus": "error",
        "@angular-eslint/template/no-call-expression": "error",
        "@angular-eslint/template/no-distracting-elements": "error",
        "@angular-eslint/template/no-duplicate-attributes": "error",
        "@angular-eslint/template/no-negated-async": "error",
        "@angular-eslint/template/no-positive-tabindex": "error",
        "@angular-eslint/template/alt-text": "error",
        "@angular-eslint/template/elements-content": "error",
        "@angular-eslint/template/label-has-associated-control": "error",
        "@angular-eslint/template/table-scope": "error",
        "@angular-eslint/template/valid-aria": "error"
      }
    }
  ]
}
