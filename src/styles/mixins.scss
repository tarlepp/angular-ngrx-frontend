@use 'sass:math';

// Use project variables
@use './variables' as vars;

@function depth($map) {
  $level: 1;

  @each $key, $value in $map {
    @if meta.type-of($value) == 'map' {
      $level: math.max(depth($value) + 1, $level);
    }
  }

  @return $level;
}

/**
 * Use like;
 *  .foo {
 *    @include debug-map($light-theme);
 *
 *    color: #f00;
 *  }
 *
 * And after that just look compiled CSS file
 */
/* stylelint-disable */
@mixin debug-map($map) {
  @at-root {
    //noinspection ALL
    @debug-map {
      __tostring__: inspect($map);
      __length__: length($map);
      __depth__: depth($map);
      __keys__: map-keys($map);

      __properties__ {
        @each $key, $value in $map {
          #{'(' + type-of($value) + ') ' + $key}: inspect($value);
        }
      }
    }
  }
}
/* stylelint-enable */

@mixin transition($transition...) {
  transition: $transition;
}

@mixin transform($transform...) {
  transform: translateY($transform);
}

@mixin transition-property($property...) {
  transition-property: $property;
}

@mixin transition-duration($duration...) {
  transition-duration: $duration;
}

@mixin transition-timing-function($timing...) {
  transition-timing-function: $timing;
}

@mixin transition-delay($delay...) {
  transition-delay: $delay;
}

@mixin user-select($type) {
  user-select: $type;
}

@mixin transition-ease-in-out-all() {
  @include transition(all vars.$interval ease-in-out);
}

@mixin scroll-bar() {
  &::-webkit-scrollbar {
    width: vars.$spacing-quarter;
    height: vars.$spacing-quarter;
    border-radius: vars.$spacing-half;
  }

  ::-webkit-scrollbar:horizontal {
    height: vars.$spacing-quarter;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: vars.$spacing-half;
    background: var(--theme-primary-color);
  }

  &::-webkit-scrollbar-track {
    border-radius: vars.$spacing-half;
    background: var(--theme-primary-color-contrast);
  }
}
